// Story Data with Animation and Image URLs
const lessons = [
  {
    story: "ржнрзЛржЧрзА ржмрж╛ржШ ржмржирзЗрж░ рж╕ржмржЪрзЗрзЯрзЗ ржЕрж▓рж╕ ржкрзНрж░рж╛ржгрзА ржЫрж┐рж▓ред ржЕржирзНржпрж╛ржирзНржп ржмрж╛ржШрзЗрж░рж╛ ржпржЦржи рж╢рж┐ржХрж╛рж░ ржХрж░рждрзЗ ржпрзЗржд, рждржЦржи рж╕рзЗ ржЧрж╛ржЫрзЗрж░ ржирж┐ржЪрзЗ рж╣рзЗрж▓рж╛ржи ржжрж┐рзЯрзЗ ржмрж╕рзЗ ржерж╛ржХржд ржЖрж░ ржнрж╛ржмржд,
ЁЯСЙ тАЬржЙржл! рж╢рж┐ржХрж╛рж░ ржХрж░рж╛ ржпрзЗ ржХрзА ржХрж╖рзНржЯрзЗрж░ ржХрж╛ржЬ! ржХрзЗржЙ ржпржжрж┐ ржЖржорж╛рж░ ржЬржирзНржп ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж┐ржд!тАЭ

рждрж╛ржЗ рж╕рзЗ ржПржХржжрж┐ржи ржПржХ ржЪрж╛рж▓рж╛ржХ рж╢рж┐рзЯрж╛рж▓рзЗрж░ ржХрж╛ржЫрзЗ ржЧрзЗрж▓ ржПржмржВ ржмрж▓рж▓тАФ
ЁЯжК: тАЬржнрж╛ржЗ рж╢рж┐рзЯрж╛рж▓, рждрзБржорж┐ ржпржжрж┐ ржкрзНрж░рждрж┐ржжрж┐ржи ржЖржорж╛рж░ ржЬржирзНржп ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржЖржорж┐ рждрзЛржорж╛ржХрзЗ рж░рж╛ржЬрзНржпрзЗрж░ ржкрзНрж░ржзрж╛ржи ржЙржкржжрзЗрж╖рзНржЯрж╛ ржмрж╛ржирж┐рзЯрзЗ ржжрзЗржм!тАЭ

рж╢рж┐рзЯрж╛рж▓ ржоржирзЗ ржоржирзЗ рж╣рж╛рж╕рж▓ ржЖрж░ ржнрж╛ржмрж▓, тАЬржПрждрзЛ ржмрзЬ рж╕рзБржпрзЛржЧ!тАЭ ЁЯШЖ",
    prompt: "ржнрзЛржЧрзА ржмрж╛ржШ ржмржирзЗрж░ рж╕ржмржЪрзЗрзЯрзЗ ржЕрж▓рж╕ ржкрзНрж░рж╛ржгрзА ржЫрж┐рж▓ред ржЕржирзНржпрж╛ржирзНржп ржмрж╛ржШрзЗрж░рж╛ ржпржЦржи рж╢рж┐ржХрж╛рж░ ржХрж░рждрзЗ ржпрзЗржд, рждржЦржи рж╕рзЗ ржЧрж╛ржЫрзЗрж░ ржирж┐ржЪрзЗ рж╣рзЗрж▓рж╛ржи ржжрж┐рзЯрзЗ ржмрж╕рзЗ ржерж╛ржХржд ржЖрж░ ржнрж╛ржмржд,тАЬржЙржл! рж╢рж┐ржХрж╛рж░ ржХрж░рж╛ ржпрзЗ ржХрзА ржХрж╖рзНржЯрзЗрж░ ржХрж╛ржЬ! ржХрзЗржЙ ржпржжрж┐ ржЖржорж╛рж░ ржЬржирзНржп ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж┐ржд! рждрж╛ржЗ рж╕рзЗ ржПржХржжрж┐ржи ржПржХ ржЪрж╛рж▓рж╛ржХ рж╢рж┐рзЯрж╛рж▓рзЗрж░ ржХрж╛ржЫрзЗ ржЧрзЗрж▓ ржПржмржВ ржмрж▓рж▓тАФ тАЬржнрж╛ржЗ рж╢рж┐рзЯрж╛рж▓, рждрзБржорж┐ ржпржжрж┐ ржкрзНрж░рждрж┐ржжрж┐ржи ржЖржорж╛рж░ ржЬржирзНржп ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржЖржорж┐ рждрзЛржорж╛ржХрзЗ рж░рж╛ржЬрзНржпрзЗрж░ ржкрзНрж░ржзрж╛ржи ржЙржкржжрзЗрж╖рзНржЯрж╛ ржмрж╛ржирж┐рзЯрзЗ ржжрзЗржм!",

    animation: "https://assets1.lottiefiles.com/packages/lf20_5tkzkblw.json",
    image: ""
  },
  {
    story: "рж╢рж┐рзЯрж╛рж▓ ржкрзНрж░рждрж┐ржжрж┐ржи ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж┐ржд, ржХрж┐ржирзНрждрзБ ржЖрж╕рж▓ ржоржЬрж╛ржЯрж╛ ржПржЦрж╛ржирзЗтАФ рж╕рзЗ рж╕ржмржЬрж┐рж░ рж╕рж╛ржерзЗ ржПржХржЯрзБ ржПржХржЯрзБ ржХрж░рзЗ ржорж╛ржВрж╕ ржорж┐рж╢рж┐рзЯрзЗ ржжрж┐ржд! ЁЯдг
ржкрзНрж░ржержо ржжрж┐ржи ржЧрж░рзБрж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ ржЖрж▓рзБ,
ржжрзНржмрж┐рждрзАрзЯ ржжрж┐ржи рж╣рж╛ржБрж╕рзЗрж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ рж▓рж╛ржЙ,
рждрзГрждрзАрзЯ ржжрж┐ржи ржорзБрж░ржЧрж┐рж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╢рж╛ржХ!

ржнрзЛржЧрзА ржмрж╛ржШ ржкрзНрж░ржержорзЗ ржЯрзЗрж░ ржкрзЗрж▓ ржирж╛, ржХрж┐ржирзНрждрзБ ржПржХ рж╕ржкрзНрждрж╛рж╣ ржкрж░рзЗ рж╕рзЗ ржЖрзЯржирж╛рж░ рж╕рж╛ржоржирзЗ ржжрж╛ржБрзЬрж┐рзЯрзЗ ржжрзЗржЦрж▓тАФ",
    prompt: "рж╢рж┐рзЯрж╛рж▓ ржкрзНрж░рждрж┐ржжрж┐ржи ржЦрж╛ржмрж╛рж░ ржПржирзЗ ржжрж┐ржд, ржХрж┐ржирзНрждрзБ ржЖрж╕рж▓ ржоржЬрж╛ржЯрж╛ ржПржЦрж╛ржирзЗтАФ рж╕рзЗ рж╕ржмржЬрж┐рж░ рж╕рж╛ржерзЗ ржПржХржЯрзБ ржПржХржЯрзБ ржХрж░рзЗ ржорж╛ржВрж╕ ржорж┐рж╢рж┐рзЯрзЗ ржжрж┐ржд!
ржкрзНрж░ржержо ржжрж┐ржи ржЧрж░рзБрж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ ржЖрж▓рзБ,
ржжрзНржмрж┐рждрзАрзЯ ржжрж┐ржи рж╣рж╛ржБрж╕рзЗрж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ рж▓рж╛ржЙ,
рждрзГрждрзАрзЯ ржжрж┐ржи ржорзБрж░ржЧрж┐рж░ ржорж╛ржВрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╢рж╛ржХ!

ржнрзЛржЧрзА ржмрж╛ржШ ржкрзНрж░ржержорзЗ ржЯрзЗрж░ ржкрзЗрж▓ ржирж╛, ржХрж┐ржирзНрждрзБ ржПржХ рж╕ржкрзНрждрж╛рж╣ ржкрж░рзЗ рж╕рзЗ ржЖрзЯржирж╛рж░ рж╕рж╛ржоржирзЗ ржжрж╛ржБрзЬрж┐рзЯрзЗ ржжрзЗржЦрж▓",
    animation: "https://lottie.host/a7caad47-43c7-45d0-bb5e-7c98590a1843/rFfeIXnXsA.json",
    image: ""
  },
  {
    story: "ржХрж┐ржирзНрждрзБ ржорж╛ржиржЪрж┐рждрзНрж░ ржкржбрж╝рждрзЗ ржЧрзЗрж▓рзЗржЗ ржжрзЗржЦрж╛ ржжрж┐рж▓ рж░рж╣рж╕рзНржпржорзЯ рж╕ржорж╕рзНржпрж╛!",
    prompt: "рж░рж╣рж╕рзНржпржорзЯ рж╕ржорж╕рзНржпрж╛ ржжрзЗржЦрж╛ ржжрж┐рж▓",
    animation: "https://assets2.lottiefiles.com/packages/lf20_touohax0.json",
    image: "https://example.com/image3.jpg"
  }
];

let currentLesson = 0;
let mistakes = [];
let startTime = Date.now();

// Initialize Lesson
function initLesson() {
  const lesson = lessons[currentLesson];
  document.getElementById('storyText').innerHTML = lesson.story;
  document.getElementById('lottie').load(lesson.animation);
  document.getElementById('storyImage').src = lesson.image;
  document.getElementById('typingInput').value = '';
  renderPrompt(lesson.prompt);
  startTime = Date.now();
  document.getElementById('bgMusic').play();
}

// Render Prompt with Character Spans
function renderPrompt(text) {
  const promptDiv = document.getElementById('typingPrompt');
  promptDiv.innerHTML = text.split('').map(char => 
    `<span class="character" data-char="${char}">${char}</span>`
  ).join('');
}

// Real-time Input Check
document.getElementById('typingInput').addEventListener('input', (e) => {
  const userText = e.target.value.split('');
  const promptChars = [...document.querySelectorAll('#typingPrompt .character')];
  let newMistakes = [];

  promptChars.forEach((span, index) => {
    const expectedChar = span.dataset.char;
    const userChar = userText[index];

    span.classList.remove('character-correct', 'character-incorrect');
    if (userChar === undefined) {
      span.classList.remove('character-extra');
    } else if (userChar === expectedChar) {
      span.classList.add('character-correct');
    } else {
      span.classList.add('character-incorrect');
      newMistakes.push({ expected: expectedChar, actual: userChar, position: index });
    }
  });

  // Check Extra Characters
  const extraChars = userText.slice(promptChars.length);
  if (extraChars.length > 0) {
    newMistakes.push({ expected: 'END', actual: extraChars.join(''), position: promptChars.length });
  }

  mistakes = newMistakes;
  updateFeedback();
  checkCompletion();
});

// Update Feedback
function updateFeedback() {
  const mistakeSummary = document.getElementById('mistakeSummary');
  mistakeSummary.innerHTML = mistakes.map(m => 
    `ЁЯУН ржЕржмрж╕рзНржерж╛ржи ${m.position + 1}: ржЖрж╢рж╛ ржХрж░рж╛ рж╣рзЯрзЗржЫрж┐рж▓ <span class="text-red-500">"${m.expected}"</span>, ржЖржкржирж┐ рж▓рж┐ржЦрзЗржЫрзЗржи <span class="text-blue-500">"${m.actual}"</span>`
  ).join('<br>');

  // Play Sounds
  if (mistakes.length > 0) {
    document.getElementById('wrongSound').play();
  } else {
    document.getElementById('correctSound').play();
  }
}

// Check Lesson Completion
function checkCompletion() {
  const isComplete = mistakes.length === 0 &&
    document.getElementById('typingInput').value.length === lessons[currentLesson].prompt.length;

  document.getElementById('nextBtn').disabled = !isComplete;
  updateProgress();
}

// Update Progress
function updateProgress() {
  const progress = ((currentLesson + 1) / lessons.length) * 100;
  document.getElementById('progressBar').style.width = `${progress}%`;
  document.getElementById('progressText').textContent = `${Math.round(progress)}%`;

  // Calculate Speed & Accuracy
  const timeElapsed = (Date.now() - startTime) / 60000; // minutes
  const words = document.getElementById('typingInput').value.split(' ').length;
  document.getElementById('speed').textContent = `ржЧрждрж┐: ${Math.round(words / timeElapsed)} рж╢ржмрзНржж/ржорж┐ржирж┐ржЯ`;
  document.getElementById('accuracy').textContent = `ржирж┐рж░рзНржнрзБрж▓рждрж╛: ${100 - Math.round((mistakes.length / lessons[currentLesson].prompt.length) * 100)}%`;
}

// Next Lesson
document.getElementById('nextBtn').addEventListener('click', () => {
  currentLesson = (currentLesson + 1) % lessons.length;
  initLesson();
});

// Start First Lesson
initLesson();
